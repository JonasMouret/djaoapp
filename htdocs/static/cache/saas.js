!function(n){var e={};function t(r){if(e[r])return e[r].exports;var a=e[r]={i:r,l:!1,exports:{}};return n[r].call(a.exports,a,a.exports,t),a.l=!0,a.exports}t.m=n,t.c=e,t.d=function(n,e,r){t.o(n,e)||Object.defineProperty(n,e,{enumerable:!0,get:r})},t.r=function(n){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(n,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(n,"__esModule",{value:!0})},t.t=function(n,e){if(1&e&&(n=t(n)),8&e)return n;if(4&e&&"object"==typeof n&&n&&n.__esModule)return n;var r=Object.create(null);if(t.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:n}),2&e&&"string"!=typeof n)for(var a in n)t.d(r,a,function(e){return n[e]}.bind(null,a));return r},t.n=function(n){var e=n&&n.__esModule?function(){return n.default}:function(){return n};return t.d(e,"a",e),e},t.o=function(n,e){return Object.prototype.hasOwnProperty.call(n,e)},t.p="/static/cache/",t(t.s=157)}({1:function(n,e){n.exports=function(n){function e(n){"undefined"!=typeof console&&(console.error||console.log)("[Script Loader]",n)}try{"undefined"!=typeof execScript&&"undefined"!=typeof attachEvent&&"undefined"==typeof addEventListener?execScript(n):"undefined"!=typeof eval?eval.call(null,n):e("EvalError: No eval function available")}catch(n){e(n)}}},10:function(n,e,t){t(1)(t(11))},11:function(n,e){n.exports='(function ($) {\n  "use strict";\n\n   function Region(el, options){\n      this.element = $(el);\n      this.options = options;\n      this.init();\n   }\n\n   Region.prototype = {\n      init: function () {\n          var self = this;\n          var coutrySel = self.options.country ? $(self.options.country)\n              : self.element.parents("form").find("[name=\'country\']");\n          coutrySel.change(function() {\n              self._country(this.value);\n          });\n          self._country(coutrySel.val());\n      },\n\n      _country: function (country) {\n          var self = this;\n          var node = self.element;\n          var id = self.element.attr("id");\n          var name = self.element.attr("name");\n          var value = self.element.val();\n          var regionSel = "";\n          if( country in self._regions ) {\n              regionSel = "<select id=\\"" + id +\n              "\\" class=\\"form-control\\" name=\\"" + name + "\\">";\n              var localRegions = self._regions[country];\n              for(var key in localRegions ) {\n                  regionSel += "<option value=\\"" + key + "\\"";\n                  if(key === value) {\n                      regionSel += "selected";\n                  }\n                  regionSel += ">" + localRegions[key] + "</option>";\n              }\n              regionSel += "</select>";\n          } else if( !self.element.is("input") ) {\n              regionSel = "<input id=\\"" + id +\n                "\\" class=\\"form-control\\" name=\\"" + name +\n                "\\" type=\\"text\\" value=\\"\\">";\n          }\n          if( regionSel ) {\n              regionSel = $(regionSel);\n              self.element.replaceWith(regionSel);\n              self.element = regionSel;\n          }\n      },\n\n      _regions: {\n"CA": {\n    "AB": "Alberta",\n    "BC": "British Columbia",\n    "MB": "Manitoba",\n    "NB": "New Brunswick",\n    "NL": "Newfoundland and Labrador",\n    "NT": "Northwest Territories",\n    "NS": "Nova Scotia",\n    "NU": "Nunavut",\n    "ON": "Ontario",\n    "PE": "Prince Edward Island",\n    "QC": "Quebec",\n    "SK": "Saskatchewan",\n    "YT": "Yukon"},\n"US": {\n    "AL": "Alabama",\n    "AK": "Alaska",\n    "AS": "American Samoa",\n    "AZ": "Arizona",\n    "AR": "Arkansas",\n    "AA": "Armed Forces Americas",\n    "AE": "Armed Forces Europe",\n    "AP": "Armed Forces Pacific",\n    "CA": "California",\n    "CO": "Colorado",\n    "CT": "Connecticut",\n    "DE": "Delaware",\n    "DC": "District of Columbia",\n    "FM": "Federated States of Micronesia",\n    "FL": "Florida",\n    "GA": "Georgia",\n    "GU": "Guam",\n    "HI": "Hawaii",\n    "ID": "Idaho",\n    "IL": "Illinois",\n    "IN": "Indiana",\n    "IA": "Iowa",\n    "KS": "Kansas",\n    "KY": "Kentucky",\n    "LA": "Louisiana",\n    "ME": "Maine",\n    "MH": "Marshall Islands",\n    "MD": "Maryland",\n    "MA": "Massachusetts",\n    "MI": "Michigan",\n    "MN": "Minnesota",\n    "MS": "Mississippi",\n    "MO": "Missouri",\n    "MT": "Montana",\n    "NE": "Nebraska",\n    "NV": "Nevada",\n    "NH": "New Hampshire",\n    "NJ": "New Jersey",\n    "NM": "New Mexico",\n    "NY": "New York",\n    "NC": "North Carolina",\n    "ND": "North Dakota",\n    "MP": "Northern Mariana Islands",\n    "OH": "Ohio",\n    "OK": "Oklahoma",\n    "OR": "Oregon",\n    "PW": "Palau",\n    "PA": "Pennsylvania",\n    "PR": "Puerto Rico",\n    "RI": "Rhode Island",\n    "SC": "South Carolina",\n    "SD": "South Dakota",\n    "TN": "Tennessee",\n    "TX": "Texas",\n    "UT": "Utah",\n    "VT": "Vermont",\n    "VI": "Virgin Islands",\n    "VA": "Virginia",\n    "WA": "Washington",\n    "WV": "West Virginia",\n    "WI": "Wisconsin",\n    "WY": "Wyoming"}\n      }\n\n   };\n\n   $.fn.region = function(options) {\n      var opts = $.extend( {}, $.fn.region.defaults, options );\n      return new Region($(this), opts);\n   };\n\n   $.fn.region.defaults = {\n      country: null\n   };\n\n   $(document).ready(function(){\n      $("[name=\'region\']").region();\n   });\n\n})(jQuery);\n'},12:function(n,e,t){t(1)(t(13))},13:function(n,e){n.exports='/** These are plumbing functions to connect the UI and API backends.\n */\n\nfunction clearMessages() {\n    "use strict";\n    $("#messages-content").empty();\n};\n\nfunction showMessages(messages, style) {\n    "use strict";\n    if( typeof toastr !== \'undefined\'\n        && $(toastr.options.containerId).length > 0 ) {\n        for( var i = 0; i < messages.length; ++i ) {\n            toastr[style](messages[i]);\n        }\n\n    } else {\n        var messageBlock = "<div class=\\"alert alert-block";\n        if( style ) {\n            if( style === "error" ) {\n                style = "danger";\n            }\n            messageBlock += " alert-" + style;\n        }\n        messageBlock += "\\"><button type=\\"button\\" class=\\"close\\" data-dismiss=\\"alert\\">&times;</button>";\n\n        if( typeof messages === "string" ) {\n            messages = [messages];\n        }\n        for( var i = 0; i < messages.length; ++i ) {\n            messageBlock += "<div>" + messages[i] + "</div>";\n         }\n         messageBlock += "</div>";\n         $("#messages-content").append(messageBlock);\n    }\n    $("#messages").removeClass("hidden");\n    $("html, body").animate({\n        // scrollTop: $("#messages").offset().top - 50\n        // avoid weird animation when messages at the top:\n        scrollTop: $("body").offset().top\n    }, 500);\n};\n\n\n/**\n Decorates elements when details exist, otherwise return messages to be shown\n globally.\n\n This method takes a `resp` argument as passed by jQuery ajax calls.\n */\nfunction _showErrorMessages(resp) {\n    var messages = [];\n    if( typeof resp === "string" ) {\n        messages = [resp];\n    } else {\n        var data = resp.data || resp.responseJSON;\n        if( data && typeof data === "object" ) {\n            if( data.detail ) {\n                messages = [data.detail];\n            } else if( $.isArray(data) ) {\n                for( var idx = 0; idx < data.length; ++idx ) {\n                    messages = messages.concat(_showErrorMessages(data[idx]));\n                }\n            } else {\n                for( var key in data ) {\n                    if (data.hasOwnProperty(key)) {\n                        var message = data[key];\n                        if( $.isArray(data[key]) ) {\n                            message = "";\n                            var sep = "";\n                            for( var i = 0; i < data[key].length; ++i ) {\n                                var messagePart = data[key][i];\n                                if( typeof data[key][i] !== \'string\' ) {\n                                    messagePart = JSON.stringify(data[key][i]);\n                                }\n                                message += sep + messagePart;\n                                sep = ", ";\n                            }\n                        } else if( data[key].hasOwnProperty(\'detail\') ) {\n                            message = data[key].detail;\n                        }\n                        messages.push(key + ": " + message);\n                        var inputField = $("[name=\\"" + key + "\\"]");\n                        var parent = inputField.parents(\'.form-group\');\n                        inputField.addClass("is-invalid");\n                        parent.addClass("has-error");\n                        var help = parent.find(\'.invalid-feedback\');\n                        if( help.length > 0 ) { help.text(message); }\n                    }\n                }\n            }\n        } else if( resp.detail ) {\n            messages = [resp.detail];\n        }\n    }\n    return messages;\n};\n\n\nfunction showErrorMessages(resp) {\n    if( resp.status >= 500 && resp.status < 600 ) {\n        msg = "Err " + resp.status + ": " + resp.statusText;\n        if( _showErrorMessagesProviderNotified ) {\n            msg += "<br />" + _showErrorMessagesProviderNotified;\n        }\n        messages = [msg];\n    } else {\n        var messages = _showErrorMessages(resp);\n        if( messages.length === 0 ) {\n            messages = ["Err " + resp.status + ": " + resp.statusText];\n        }\n    }\n    showMessages(messages, "error");\n};\n\n\n/** Formats a date shown to the user.\n*/\nvar DATE_FORMAT = \'MMM DD, YYYY\';\n\n/** Retrieves the csrf-token from a <head> meta tag.\n\n    <meta name="csrf-token" content="{{csrf_token}}">\n*/\nfunction getMetaCSRFToken() {\n    "use strict";\n    var metas = document.getElementsByTagName(\'meta\');\n    for( var i = 0; i < metas.length; i++) {\n        if (metas[i].getAttribute("name") == "csrf-token") {\n            return metas[i].getAttribute("content");\n        }\n    }\n    return "";\n};\n\n/** Retrieves an URL query argument.\n\n    Example:\n\n        window.location = getUrlParameter(\'next\');\n*/\nfunction getUrlParameter(name) {\n    name = name.replace(/[\\[]/, \'\\\\[\').replace(/[\\]]/, \'\\\\]\');\n    var regex = new RegExp(\'[\\\\?&]\' + name + \'=([^&#]*)\');\n    var results = regex.exec(location.search);\n    return results === null ? \'\' : decodeURIComponent(results[1].replace(/\\+/g, \' \'));\n};\n'},157:function(n,e,t){"use strict";t.r(e);t(158),t(5),t(10),t(12),t(160),t(162)},158:function(n,e,t){t(1)(t(159))},159:function(n,e){n.exports="// Generated by CoffeeScript 1.7.1\n(function() {\n  var $, cardFromNumber, cardFromType, cards, defaultFormat, formatBackCardNumber, formatBackExpiry, formatCardNumber, formatExpiry, formatForwardExpiry, formatForwardSlashAndSpace, hasTextSelected, luhnCheck, reFormatCVC, reFormatCardNumber, reFormatExpiry, reFormatNumeric, replaceFullWidthChars, restrictCVC, restrictCardNumber, restrictExpiry, restrictNumeric, safeVal, setCardType,\n    __slice = [].slice,\n    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };\n\n  $ = window.jQuery || window.Zepto || window.$;\n\n  $.payment = {};\n\n  $.payment.fn = {};\n\n  $.fn.payment = function() {\n    var args, method;\n    method = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];\n    return $.payment.fn[method].apply(this, args);\n  };\n\n  defaultFormat = /(\\d{1,4})/g;\n\n  $.payment.cards = cards = [\n    {\n      type: 'maestro',\n      patterns: [5018, 502, 503, 506, 56, 58, 639, 6220, 67],\n      format: defaultFormat,\n      length: [12, 13, 14, 15, 16, 17, 18, 19],\n      cvcLength: [3],\n      luhn: true\n    }, {\n      type: 'forbrugsforeningen',\n      patterns: [600],\n      format: defaultFormat,\n      length: [16],\n      cvcLength: [3],\n      luhn: true\n    }, {\n      type: 'dankort',\n      patterns: [5019],\n      format: defaultFormat,\n      length: [16],\n      cvcLength: [3],\n      luhn: true\n    }, {\n      type: 'visa',\n      patterns: [4],\n      format: defaultFormat,\n      length: [13, 16],\n      cvcLength: [3],\n      luhn: true\n    }, {\n      type: 'mastercard',\n      patterns: [51, 52, 53, 54, 55, 22, 23, 24, 25, 26, 27],\n      format: defaultFormat,\n      length: [16],\n      cvcLength: [3],\n      luhn: true\n    }, {\n      type: 'amex',\n      patterns: [34, 37],\n      format: /(\\d{1,4})(\\d{1,6})?(\\d{1,5})?/,\n      length: [15],\n      cvcLength: [3, 4],\n      luhn: true\n    }, {\n      type: 'dinersclub',\n      patterns: [30, 36, 38, 39],\n      format: /(\\d{1,4})(\\d{1,6})?(\\d{1,4})?/,\n      length: [14],\n      cvcLength: [3],\n      luhn: true\n    }, {\n      type: 'discover',\n      patterns: [60, 64, 65, 622],\n      format: defaultFormat,\n      length: [16],\n      cvcLength: [3],\n      luhn: true\n    }, {\n      type: 'unionpay',\n      patterns: [62, 88],\n      format: defaultFormat,\n      length: [16, 17, 18, 19],\n      cvcLength: [3],\n      luhn: false\n    }, {\n      type: 'jcb',\n      patterns: [35],\n      format: defaultFormat,\n      length: [16],\n      cvcLength: [3],\n      luhn: true\n    }\n  ];\n\n  cardFromNumber = function(num) {\n    var card, p, pattern, _i, _j, _len, _len1, _ref;\n    num = (num + '').replace(/\\D/g, '');\n    for (_i = 0, _len = cards.length; _i < _len; _i++) {\n      card = cards[_i];\n      _ref = card.patterns;\n      for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {\n        pattern = _ref[_j];\n        p = pattern + '';\n        if (num.substr(0, p.length) === p) {\n          return card;\n        }\n      }\n    }\n  };\n\n  cardFromType = function(type) {\n    var card, _i, _len;\n    for (_i = 0, _len = cards.length; _i < _len; _i++) {\n      card = cards[_i];\n      if (card.type === type) {\n        return card;\n      }\n    }\n  };\n\n  luhnCheck = function(num) {\n    var digit, digits, odd, sum, _i, _len;\n    odd = true;\n    sum = 0;\n    digits = (num + '').split('').reverse();\n    for (_i = 0, _len = digits.length; _i < _len; _i++) {\n      digit = digits[_i];\n      digit = parseInt(digit, 10);\n      if ((odd = !odd)) {\n        digit *= 2;\n      }\n      if (digit > 9) {\n        digit -= 9;\n      }\n      sum += digit;\n    }\n    return sum % 10 === 0;\n  };\n\n  hasTextSelected = function($target) {\n    var _ref;\n    if (($target.prop('selectionStart') != null) && $target.prop('selectionStart') !== $target.prop('selectionEnd')) {\n      return true;\n    }\n    if ((typeof document !== \"undefined\" && document !== null ? (_ref = document.selection) != null ? _ref.createRange : void 0 : void 0) != null) {\n      if (document.selection.createRange().text) {\n        return true;\n      }\n    }\n    return false;\n  };\n\n  safeVal = function(value, $target) {\n    var currPair, cursor, digit, error, last, prevPair;\n    try {\n      cursor = $target.prop('selectionStart');\n    } catch (_error) {\n      error = _error;\n      cursor = null;\n    }\n    last = $target.val();\n    $target.val(value);\n    if (cursor !== null && $target.is(\":focus\")) {\n      if (cursor === last.length) {\n        cursor = value.length;\n      }\n      if (last !== value) {\n        prevPair = last.slice(cursor - 1, +cursor + 1 || 9e9);\n        currPair = value.slice(cursor - 1, +cursor + 1 || 9e9);\n        digit = value[cursor];\n        if (/\\d/.test(digit) && prevPair === (\"\" + digit + \" \") && currPair === (\" \" + digit)) {\n          cursor = cursor + 1;\n        }\n      }\n      $target.prop('selectionStart', cursor);\n      return $target.prop('selectionEnd', cursor);\n    }\n  };\n\n  replaceFullWidthChars = function(str) {\n    var chars, chr, fullWidth, halfWidth, idx, value, _i, _len;\n    if (str == null) {\n      str = '';\n    }\n    fullWidth = '\\uff10\\uff11\\uff12\\uff13\\uff14\\uff15\\uff16\\uff17\\uff18\\uff19';\n    halfWidth = '0123456789';\n    value = '';\n    chars = str.split('');\n    for (_i = 0, _len = chars.length; _i < _len; _i++) {\n      chr = chars[_i];\n      idx = fullWidth.indexOf(chr);\n      if (idx > -1) {\n        chr = halfWidth[idx];\n      }\n      value += chr;\n    }\n    return value;\n  };\n\n  reFormatNumeric = function(e) {\n    var $target;\n    $target = $(e.currentTarget);\n    return setTimeout(function() {\n      var value;\n      value = $target.val();\n      value = replaceFullWidthChars(value);\n      value = value.replace(/\\D/g, '');\n      return safeVal(value, $target);\n    });\n  };\n\n  reFormatCardNumber = function(e) {\n    var $target;\n    $target = $(e.currentTarget);\n    return setTimeout(function() {\n      var value;\n      value = $target.val();\n      value = replaceFullWidthChars(value);\n      value = $.payment.formatCardNumber(value);\n      return safeVal(value, $target);\n    });\n  };\n\n  formatCardNumber = function(e) {\n    var $target, card, digit, length, re, upperLength, value;\n    digit = String.fromCharCode(e.which);\n    if (!/^\\d+$/.test(digit)) {\n      return;\n    }\n    $target = $(e.currentTarget);\n    value = $target.val();\n    card = cardFromNumber(value + digit);\n    length = (value.replace(/\\D/g, '') + digit).length;\n    upperLength = 16;\n    if (card) {\n      upperLength = card.length[card.length.length - 1];\n    }\n    if (length >= upperLength) {\n      return;\n    }\n    if (($target.prop('selectionStart') != null) && $target.prop('selectionStart') !== value.length) {\n      return;\n    }\n    if (card && card.type === 'amex') {\n      re = /^(\\d{4}|\\d{4}\\s\\d{6})$/;\n    } else {\n      re = /(?:^|\\s)(\\d{4})$/;\n    }\n    if (re.test(value)) {\n      e.preventDefault();\n      return setTimeout(function() {\n        return $target.val(value + ' ' + digit);\n      });\n    } else if (re.test(value + digit)) {\n      e.preventDefault();\n      return setTimeout(function() {\n        return $target.val(value + digit + ' ');\n      });\n    }\n  };\n\n  formatBackCardNumber = function(e) {\n    var $target, value;\n    $target = $(e.currentTarget);\n    value = $target.val();\n    if (e.which !== 8) {\n      return;\n    }\n    if (($target.prop('selectionStart') != null) && $target.prop('selectionStart') !== value.length) {\n      return;\n    }\n    if (/\\d\\s$/.test(value)) {\n      e.preventDefault();\n      return setTimeout(function() {\n        return $target.val(value.replace(/\\d\\s$/, ''));\n      });\n    } else if (/\\s\\d?$/.test(value)) {\n      e.preventDefault();\n      return setTimeout(function() {\n        return $target.val(value.replace(/\\d$/, ''));\n      });\n    }\n  };\n\n  reFormatExpiry = function(e) {\n    var $target;\n    $target = $(e.currentTarget);\n    return setTimeout(function() {\n      var value;\n      value = $target.val();\n      value = replaceFullWidthChars(value);\n      value = $.payment.formatExpiry(value);\n      return safeVal(value, $target);\n    });\n  };\n\n  formatExpiry = function(e) {\n    var $target, digit, val;\n    digit = String.fromCharCode(e.which);\n    if (!/^\\d+$/.test(digit)) {\n      return;\n    }\n    $target = $(e.currentTarget);\n    val = $target.val() + digit;\n    if (/^\\d$/.test(val) && (val !== '0' && val !== '1')) {\n      e.preventDefault();\n      return setTimeout(function() {\n        return $target.val(\"0\" + val + \" / \");\n      });\n    } else if (/^\\d\\d$/.test(val)) {\n      e.preventDefault();\n      return setTimeout(function() {\n        var m1, m2;\n        m1 = parseInt(val[0], 10);\n        m2 = parseInt(val[1], 10);\n        if (m2 > 2 && m1 !== 0) {\n          return $target.val(\"0\" + m1 + \" / \" + m2);\n        } else {\n          return $target.val(\"\" + val + \" / \");\n        }\n      });\n    }\n  };\n\n  formatForwardExpiry = function(e) {\n    var $target, digit, val;\n    digit = String.fromCharCode(e.which);\n    if (!/^\\d+$/.test(digit)) {\n      return;\n    }\n    $target = $(e.currentTarget);\n    val = $target.val();\n    if (/^\\d\\d$/.test(val)) {\n      return $target.val(\"\" + val + \" / \");\n    }\n  };\n\n  formatForwardSlashAndSpace = function(e) {\n    var $target, val, which;\n    which = String.fromCharCode(e.which);\n    if (!(which === '/' || which === ' ')) {\n      return;\n    }\n    $target = $(e.currentTarget);\n    val = $target.val();\n    if (/^\\d$/.test(val) && val !== '0') {\n      return $target.val(\"0\" + val + \" / \");\n    }\n  };\n\n  formatBackExpiry = function(e) {\n    var $target, value;\n    $target = $(e.currentTarget);\n    value = $target.val();\n    if (e.which !== 8) {\n      return;\n    }\n    if (($target.prop('selectionStart') != null) && $target.prop('selectionStart') !== value.length) {\n      return;\n    }\n    if (/\\d\\s\\/\\s$/.test(value)) {\n      e.preventDefault();\n      return setTimeout(function() {\n        return $target.val(value.replace(/\\d\\s\\/\\s$/, ''));\n      });\n    }\n  };\n\n  reFormatCVC = function(e) {\n    var $target;\n    $target = $(e.currentTarget);\n    return setTimeout(function() {\n      var value;\n      value = $target.val();\n      value = replaceFullWidthChars(value);\n      value = value.replace(/\\D/g, '').slice(0, 4);\n      return safeVal(value, $target);\n    });\n  };\n\n  restrictNumeric = function(e) {\n    var input;\n    if (e.metaKey || e.ctrlKey) {\n      return true;\n    }\n    if (e.which === 32) {\n      return false;\n    }\n    if (e.which === 0) {\n      return true;\n    }\n    if (e.which < 33) {\n      return true;\n    }\n    input = String.fromCharCode(e.which);\n    return !!/[\\d\\s]/.test(input);\n  };\n\n  restrictCardNumber = function(e) {\n    var $target, card, digit, value;\n    $target = $(e.currentTarget);\n    digit = String.fromCharCode(e.which);\n    if (!/^\\d+$/.test(digit)) {\n      return;\n    }\n    if (hasTextSelected($target)) {\n      return;\n    }\n    value = ($target.val() + digit).replace(/\\D/g, '');\n    card = cardFromNumber(value);\n    if (card) {\n      return value.length <= card.length[card.length.length - 1];\n    } else {\n      return value.length <= 16;\n    }\n  };\n\n  restrictExpiry = function(e) {\n    var $target, digit, value;\n    $target = $(e.currentTarget);\n    digit = String.fromCharCode(e.which);\n    if (!/^\\d+$/.test(digit)) {\n      return;\n    }\n    if (hasTextSelected($target)) {\n      return;\n    }\n    value = $target.val() + digit;\n    value = value.replace(/\\D/g, '');\n    if (value.length > 6) {\n      return false;\n    }\n  };\n\n  restrictCVC = function(e) {\n    var $target, digit, val;\n    $target = $(e.currentTarget);\n    digit = String.fromCharCode(e.which);\n    if (!/^\\d+$/.test(digit)) {\n      return;\n    }\n    if (hasTextSelected($target)) {\n      return;\n    }\n    val = $target.val() + digit;\n    return val.length <= 4;\n  };\n\n  setCardType = function(e) {\n    var $target, allTypes, card, cardType, val;\n    $target = $(e.currentTarget);\n    val = $target.val();\n    cardType = $.payment.cardType(val) || 'unknown';\n    if (!$target.hasClass(cardType)) {\n      allTypes = (function() {\n        var _i, _len, _results;\n        _results = [];\n        for (_i = 0, _len = cards.length; _i < _len; _i++) {\n          card = cards[_i];\n          _results.push(card.type);\n        }\n        return _results;\n      })();\n      $target.removeClass('unknown');\n      $target.removeClass(allTypes.join(' '));\n      $target.addClass(cardType);\n      $target.toggleClass('identified', cardType !== 'unknown');\n      return $target.trigger('payment.cardType', cardType);\n    }\n  };\n\n  $.payment.fn.formatCardCVC = function() {\n    this.on('keypress', restrictNumeric);\n    this.on('keypress', restrictCVC);\n    this.on('paste', reFormatCVC);\n    this.on('change', reFormatCVC);\n    this.on('input', reFormatCVC);\n    return this;\n  };\n\n  $.payment.fn.formatCardExpiry = function() {\n    this.on('keypress', restrictNumeric);\n    this.on('keypress', restrictExpiry);\n    this.on('keypress', formatExpiry);\n    this.on('keypress', formatForwardSlashAndSpace);\n    this.on('keypress', formatForwardExpiry);\n    this.on('keydown', formatBackExpiry);\n    this.on('change', reFormatExpiry);\n    this.on('input', reFormatExpiry);\n    return this;\n  };\n\n  $.payment.fn.formatCardNumber = function() {\n    this.on('keypress', restrictNumeric);\n    this.on('keypress', restrictCardNumber);\n    this.on('keypress', formatCardNumber);\n    this.on('keydown', formatBackCardNumber);\n    this.on('keyup', setCardType);\n    this.on('paste', reFormatCardNumber);\n    this.on('change', reFormatCardNumber);\n    this.on('input', reFormatCardNumber);\n    this.on('input', setCardType);\n    return this;\n  };\n\n  $.payment.fn.restrictNumeric = function() {\n    this.on('keypress', restrictNumeric);\n    this.on('paste', reFormatNumeric);\n    this.on('change', reFormatNumeric);\n    this.on('input', reFormatNumeric);\n    return this;\n  };\n\n  $.payment.fn.cardExpiryVal = function() {\n    return $.payment.cardExpiryVal($(this).val());\n  };\n\n  $.payment.cardExpiryVal = function(value) {\n    var month, prefix, year, _ref;\n    _ref = value.split(/[\\s\\/]+/, 2), month = _ref[0], year = _ref[1];\n    if ((year != null ? year.length : void 0) === 2 && /^\\d+$/.test(year)) {\n      prefix = (new Date).getFullYear();\n      prefix = prefix.toString().slice(0, 2);\n      year = prefix + year;\n    }\n    month = parseInt(month, 10);\n    year = parseInt(year, 10);\n    return {\n      month: month,\n      year: year\n    };\n  };\n\n  $.payment.validateCardNumber = function(num) {\n    var card, _ref;\n    num = (num + '').replace(/\\s+|-/g, '');\n    if (!/^\\d+$/.test(num)) {\n      return false;\n    }\n    card = cardFromNumber(num);\n    if (!card) {\n      return false;\n    }\n    return (_ref = num.length, __indexOf.call(card.length, _ref) >= 0) && (card.luhn === false || luhnCheck(num));\n  };\n\n  $.payment.validateCardExpiry = function(month, year) {\n    var currentTime, expiry, _ref;\n    if (typeof month === 'object' && 'month' in month) {\n      _ref = month, month = _ref.month, year = _ref.year;\n    }\n    if (!(month && year)) {\n      return false;\n    }\n    month = $.trim(month);\n    year = $.trim(year);\n    if (!/^\\d+$/.test(month)) {\n      return false;\n    }\n    if (!/^\\d+$/.test(year)) {\n      return false;\n    }\n    if (!((1 <= month && month <= 12))) {\n      return false;\n    }\n    if (year.length === 2) {\n      if (year < 70) {\n        year = \"20\" + year;\n      } else {\n        year = \"19\" + year;\n      }\n    }\n    if (year.length !== 4) {\n      return false;\n    }\n    expiry = new Date(year, month);\n    currentTime = new Date;\n    expiry.setMonth(expiry.getMonth() - 1);\n    expiry.setMonth(expiry.getMonth() + 1, 1);\n    return expiry > currentTime;\n  };\n\n  $.payment.validateCardCVC = function(cvc, type) {\n    var card, _ref;\n    cvc = $.trim(cvc);\n    if (!/^\\d+$/.test(cvc)) {\n      return false;\n    }\n    card = cardFromType(type);\n    if (card != null) {\n      return _ref = cvc.length, __indexOf.call(card.cvcLength, _ref) >= 0;\n    } else {\n      return cvc.length >= 3 && cvc.length <= 4;\n    }\n  };\n\n  $.payment.cardType = function(num) {\n    var _ref;\n    if (!num) {\n      return null;\n    }\n    return ((_ref = cardFromNumber(num)) != null ? _ref.type : void 0) || null;\n  };\n\n  $.payment.formatCardNumber = function(num) {\n    var card, groups, upperLength, _ref;\n    num = num.replace(/\\D/g, '');\n    card = cardFromNumber(num);\n    if (!card) {\n      return num;\n    }\n    upperLength = card.length[card.length.length - 1];\n    num = num.slice(0, upperLength);\n    if (card.format.global) {\n      return (_ref = num.match(card.format)) != null ? _ref.join(' ') : void 0;\n    } else {\n      groups = card.format.exec(num);\n      if (groups == null) {\n        return;\n      }\n      groups.shift();\n      groups = $.grep(groups, function(n) {\n        return n;\n      });\n      return groups.join(' ');\n    }\n  };\n\n  $.payment.formatExpiry = function(expiry) {\n    var mon, parts, sep, year;\n    parts = expiry.match(/^\\D*(\\d{1,2})(\\D+)?(\\d{1,4})?/);\n    if (!parts) {\n      return '';\n    }\n    mon = parts[1] || '';\n    sep = parts[2] || '';\n    year = parts[3] || '';\n    if (year.length > 0) {\n      sep = ' / ';\n    } else if (sep === ' /') {\n      mon = mon.substring(0, 1);\n      sep = '';\n    } else if (mon.length === 2 || sep.length > 0) {\n      sep = ' / ';\n    } else if (mon.length === 1 && (mon !== '0' && mon !== '1')) {\n      mon = \"0\" + mon;\n      sep = ' / ';\n    }\n    return mon + sep + year;\n  };\n\n}).call(this);\n"},160:function(n,e,t){t(1)(t(161))},161:function(n,e){n.exports='/**\n   Functionality related to the cart and checkout of djaodjin-saas.\n\n   These are based on jquery.\n */\n\n/*global location setTimeout jQuery*/\n/*global getMetaCSRFToken showMessages*/\n\n\n(function ($) {\n    "use strict";\n\n    /** Add/Remove a ``CartItem`` from the active shopping cart.\n\n        HTML requirements:\n\n        <form id="*plan.slug*">\n            <input type="hidden" name="csrfmiddlewaretoken" value="...">\n            <button type="submit">*addLabel*</button>\n        </form>\n     */\n    function CartItem(el, options) {\n        this.element = $(el);\n        this.options = options;\n        this.init();\n    }\n\n    CartItem.prototype = {\n        init: function() {\n            var self = this;\n            self.item = {};\n            var restricted = ["plan",  "option",\n                "full_name", "sync_on", "invoice_key"];\n            for(var i = 0; i < restricted.length; ++i ) {\n                var key = restricted[i];\n                if( key in self.options ) {\n                    self.item[key] = self.options[key];\n                }\n            }\n            if( self.element.attr(\'id\') ) {\n                self.item.plan = self.element.attr(\'id\');\n            }\n            self.submitBtn = self.element.find("[type=\'submit\']");\n            if( self.submitBtn.empty() ) {\n                self.submitBtn = self.element;\n            }\n            self.submitBtn.click(function (event) {\n                event.preventDefault();\n                if( self.submitBtn.text() == self.options.removeLabel ) {\n                    self.remove();\n                } else {\n                    self.add();\n                }\n            });\n        },\n\n        _getCSRFToken: function() {\n            var self = this;\n            var crsfNode = self.element.find("[name=\'csrfmiddlewaretoken\']");\n            if( crsfNode.length > 0 ) {\n                return crsfNode.val();\n            }\n            return getMetaCSRFToken();\n        },\n\n        add: function() {\n            var self = this;\n            $.ajax({\n                type: "POST", // XXX Might still prefer to do PUT on list.\n                url: self.options.api_cart,\n                beforeSend: function(xhr) {\n                    xhr.setRequestHeader("X-CSRFToken", self._getCSRFToken());\n                },\n                data: JSON.stringify(self.item),\n                datatype: "json",\n                contentType: "application/json; charset=utf-8",\n                success: function(data) {\n                    if( self.options.reload ) {\n                        location.reload();\n                    } else {\n                        self.submitBtn.text(self.options.removeLabel);\n                    }\n                },\n                error: function(resp) {\n                    showErrorMessages(resp);\n                }\n            });\n        },\n\n        remove: function(successFunction) {\n            var self = this;\n            $.ajax({\n                type: "DELETE",\n                url: self.options.api_cart + "?plan=" + self.item.plan,\n                beforeSend: function(xhr) {\n                    xhr.setRequestHeader("X-CSRFToken", self._getCSRFToken());\n                },\n                success: function(data) {\n                    if( self.options.reload ) {\n                        location.reload();\n                    } else {\n                        self.submitBtn.text(self.options.addLabel);\n                    }\n                }\n            });\n        }\n    };\n\n    $.fn.cartItem = function(options) {\n        var opts = $.extend( {}, $.fn.cartItem.defaults, options );\n        return this.each(function() {\n            $(this).data("cartItem", new CartItem($(this), opts));\n        });\n    };\n\n    $.fn.cartItem.defaults = {\n        addLabel: "Add to Cart",\n        removeLabel: "Remove from Cart",\n        nb_periods: 1,\n        api_cart: \'/api/cart/\',\n        reload: false\n    };\n\n\n    /** Monitor the state (in-process, declined, etc.) of a ``Charge``\n\n        HTML requirements:\n\n        <... class="charge-status"\n             data-charge-done="HTML to display when charge succeeded."\n             data-charge-failed="HTML to display when charge failed."\n             data-charge-disputed="HTML to display when charge was disputed."\n             data-charge-created="HTML to display when charge is in progress.">\n        </...>\n     */\n    function ChargeMonitor(el, options){\n        this.element = $(el);\n        this.options = options;\n        this.init();\n    }\n\n    ChargeMonitor.prototype = {\n        init: function () {\n            var self = this;\n            if( self.options.initialState === "created" ) {\n                self.waitForCompletion();\n            }\n        },\n\n        waitForCompletion: function() {\n            var self = this;\n            $.ajax({\n                type: "GET",\n                url: self.options.saas_api_charge,\n                datatype: "json",\n                contentType: "application/json; charset=utf-8",\n                success: function(data) {\n                    if( data.state === "created" ) {\n                        setTimeout(function() {\n                            self.waitForCompletion(); }, 1000);\n                    } else {\n                        var statusElement = self.element.find(".charge-status");\n                        statusElement.text(\n                            statusElement.attr("data-charge-" + data.state));\n                    }\n                }\n            });\n        }\n    };\n\n    $.fn.chargeMonitor = function(options) {\n        var opts = $.extend( {}, $.fn.chargeMonitor.defaults, options );\n        return this.each(function() {\n            $(this).data("chargeMonitor", new ChargeMonitor($(this), opts));\n        });\n    };\n\n    $.fn.chargeMonitor.defaults = {\n        initialState: "created",\n        saas_api_charge: null\n    };\n\n    /** Email a receipt for a charge. This behavior is typically associated\n        to a button.\n     */\n    function ChargeEmailReceipt(el, options){\n        this.element = $(el);\n        this.options = options;\n        this.init();\n    }\n\n    ChargeEmailReceipt.prototype = {\n        init: function () {\n            var self = this;\n            self.state = self.options.initialState;\n            self.element.click(function (event) {\n                event.preventDefault();\n                self.emailReceipt();\n            });\n        },\n\n        _getCSRFToken: function() {\n            var self = this;\n            var crsfNode = self.element.find("[name=\'csrfmiddlewaretoken\']");\n            if( crsfNode.length > 0 ) {\n                return crsfNode.val();\n            }\n            return getMetaCSRFToken();\n        },\n\n        emailReceipt: function() {\n            var self = this;\n            if( self.state === "created" ) {\n                setTimeout(function() {\n                    $.ajax({\n                        type: "GET",\n                        url: self.options.saas_api_charge,\n                        datatype: "json",\n                        contentType: "application/json; charset=utf-8",\n                        success: function(data) {\n                            self.state = data.state;\n                            self.emailReceipt();\n                        }\n                    });\n                }, 1000);\n            } else {\n                $.ajax({\n                    type: "POST",\n                    url: self.options.saas_api_email_charge_receipt,\n                    beforeSend: function(xhr) {\n                        xhr.setRequestHeader("X-CSRFToken", self._getCSRFToken());\n                    },\n                    datatype: "json",\n                    contentType: "application/json; charset=utf-8",\n                    success: function(data) {\n                        if( data.detail ) {\n                            showMessages([data.detail], "info");\n                        }\n                    },\n                    error: function(resp) {\n                        showErrorMessages(resp);\n                    }\n                });\n            }\n        }\n    };\n\n    $.fn.chargeEmailReceipt = function(options) {\n        var opts = $.extend( {}, $.fn.chargeEmailReceipt.defaults, options );\n        return new ChargeEmailReceipt($(this), opts);\n    };\n\n    $.fn.chargeEmailReceipt.defaults = {\n        initialState: "created",\n        saas_api_email_charge_receipt: null\n    };\n\n    /** Decorate a form to create a refund on a ``ChargeItem``.\n\n        HTML requirements:\n        <form>\n          <input name="amount">\n          <button type="submit"></button>\n        </form>\n     */\n    function Refund(el, options){\n        var self = this;\n        self.element = $(el);\n        self.setOptions(options);\n        self.init();\n    }\n\n    Refund.prototype = {\n        init: function () {\n            var self = this;\n            var submitButton = self.element.find("[type=\'submit\']");\n            // Make sure we unbind the previous handler to avoid double submits\n            submitButton.off("click.refund");\n            submitButton.on("click.refund", function() {\n                return self.submit();\n            });\n        },\n\n        _getCSRFToken: function() {\n            var self = this;\n            var crsfNode = self.element.find("[name=\'csrfmiddlewaretoken\']");\n            if( crsfNode.length > 0 ) {\n                return crsfNode.val();\n            }\n            return getMetaCSRFToken();\n        },\n\n        setOptions: function(opts) {\n            var self = this;\n            self.options = opts;\n            var refundedInput = self.element.find("[name=\'amount\']");\n            var availableAmount =\n                (self.options.availableAmount / 100).toFixed(2);\n            refundedInput.attr("max", availableAmount);\n            refundedInput.attr("data-linenum", self.options.linenum);\n            refundedInput.val(availableAmount);\n        },\n\n        submit: function() {\n            var self = this;\n            var refundButton = self.options.refundButton;\n            var refundedInput = self.element.find("[name=\'amount\']");\n            var availableAmount = refundedInput.attr("max");\n            var linenum = refundedInput.attr("data-linenum");\n            var refundedAmount = refundedInput.val();\n            availableAmount = parseInt(\n                parseFloat(availableAmount.replace(/[^\\d\\.]/g, "")) * 100);\n            refundedAmount = parseInt(\n                parseFloat(refundedAmount.replace(/[^\\d\\.]/g, "")) * 100);\n            if( refundedAmount > availableAmount ) {\n                refundedAmount = availableAmount;\n            }\n            if( refundedAmount > 0 ) {\n                refundButton.attr("disabled", "disabled");\n                $.ajax({\n                    type: "POST",\n                    url: self.options.saas_api_charge_refund,\n                    beforeSend: function(xhr) {\n                        xhr.setRequestHeader(\n                            "X-CSRFToken", self._getCSRFToken());\n                    },\n                    data: JSON.stringify({"lines":\n                        [{"num": linenum, "refunded_amount": refundedAmount}]}),\n                    datatype: "json",\n                    contentType: "application/json; charset=utf-8",\n                    success: function(data) {\n                        var message = data.detail ?\n                            data.detail : "Amount refunded.";\n                        if( message ) {\n                            showMessages([message], "info");\n                        }\n                        refundButton.replaceWith(self.options.refundedLabel);\n                    },\n                    error: function(resp) {\n                        showErrorMessages(resp);\n                        refundButton.removeAttr("disabled");\n                    }\n                });\n            }\n        }\n    };\n\n    $.fn.refund = function(options) {\n        var opts = $.extend({}, $.fn.refund.defaults, options);\n        return this.each(function() {\n            var element = $(this)[0];\n            var refund = $.data(element, "refund");\n            if( !refund ) {\n                var v = $.data(element, "refund", new Refund(element, opts));\n            } else {\n                refund.setOptions(opts);\n            }\n        });\n    };\n\n    $.fn.refund.defaults = {\n        availableAmount: 0,\n        linenum: 0,\n        saas_api_charge_refund: null,\n        refundButton: null,\n        refundedLabel: "<em>Refunded</em>"\n    };\n\n    /** Invoice\n     */\n    function Invoice(el, options){\n        this.element = $(el);\n        this.options = options;\n        this.init();\n    }\n\n    Invoice.prototype = {\n        init: function () {\n            var self = this;\n\n            self.element.find("input:radio").change(function() {\n                self.updateTotalAmount();\n            });\n\n            self.element.find(".add-seat").click(function(event) {\n                event.preventDefault();\n                var subscription = $(this).parents("tbody");\n                var seatFullname = subscription.find(".seat-fullname");\n                var fullname = "";\n                if( seatFullname ) {\n                    fullname = seatFullname.val();\n                    seatFullname.val("");\n                } else {\n                    var seatFirstName = subscription.find(".seat-first-name");\n                    var seatLastName = subscription.find(".seat-last-name");\n                    fullname = seatFirstName.val() + \' \' + seatLastName.val();\n                    seatFirstName.val("");\n                    seatLastName.val("");\n                }\n                var seatEmail = subscription.find(".seat-email");\n                var item = {\n                    plan: subscription.attr("data-plan"),\n                    full_name: fullname,\n                    sync_on: seatEmail.val(),\n                    email: seatEmail.val(),\n                };\n                seatEmail.val("");\n                $.ajax({\n                    type: "POST", // XXX Might still prefer to do PUT on list.\n                    url: self.options.saas_api_cart,\n                    beforeSend: function(xhr) {\n                      xhr.setRequestHeader("X-CSRFToken", self._getCSRFToken());\n                    },\n                    data: JSON.stringify(item),\n                    datatype: "json",\n                    contentType: "application/json; charset=utf-8",\n                    success: function(data, textStatus, jqXHR) {\n                        if( jqXHR.status === 201 ) {\n                            self.insertLine(data);\n                        } else {\n                            self.updateLine(data);\n                        }\n                    },\n                    error: function(resp) {\n                        showErrorMessages(resp);\n                    }\n                });\n                return false;\n            });\n\n            self.element.find(".seat-upload-file").click(function(event) {\n                var file = $(this).parents("td").find(".seat-file");\n                var plan = $(this).parents("tbody").attr("data-plan");\n                if (file.get(0).files.length > 0) {\n                    var formData = new FormData();\n                    formData.append("file", file.get(0).files[0]);\n                    $.ajax({\n                        type: "POST",\n                        url: "/api/cart/" + plan + "/upload/",\n                        beforeSend: function(xhr) {\n                            xhr.setRequestHeader(\n                                "X-CSRFToken", self._getCSRFToken());\n                        },\n                        data: formData,\n                        processData: false,\n                        contentType: false,\n                        success: function(data) {\n                            for (var i in data.created) {\n                                self.insertLine(data.created[i]);\n                            }\n                            for (var i in data.updated) {\n                                self.updateLine(data.updated[i]);\n                            }\n                            file.val("").change();\n                        },\n                        error: function(resp) {\n                            showErrorMessages(resp);\n                        }\n                    });\n                }\n            });\n\n            self.element.find(".seat-file").change(function(event) {\n                self.updateUploadButtonVisibility($(this));\n            }).each(function() {\n                self.updateUploadButtonVisibility($(this));\n            });\n\n            if(window.FormData === undefined) {\n                self.element.find(".seat-file").hide();\n            }\n\n            self.updateTotalAmount();\n        },\n\n        _getCSRFToken: function() {\n            var self = this;\n            var crsfNode = self.element.find("[name=\'csrfmiddlewaretoken\']");\n            if( crsfNode.length > 0 ) {\n                return crsfNode.val();\n            }\n            return getMetaCSRFToken();\n        },\n\n        /** Update total amount charged on card based on selected subscription\n            charges. */\n        updateTotalAmount: function() {\n            var self = this;\n            var candidates = self.element.find("input:radio");\n            var totalAmountNode = self.element.find(".total-amount");\n            var totalAmount = 0;\n            for( var i = 0; i < candidates.length; ++i ) {\n                var radio = $(candidates[i]);\n                if( radio.is(":checked") ) {\n                    totalAmount += parseInt(radio.attr(\'data-amount\'));\n                }\n            }\n            candidates = self.element.find(".invoice-item .line-amount");\n            for( i = 0; i < candidates.length; ++i ) {\n                var lineAmountText = $(candidates[i]).text().replace(\',\',\'\');\n                var first = lineAmountText.search("[0-9]");\n                if( first > 0 ) {\n                    var lineAmount = parseFloat(\n                        lineAmountText.substring(first)) * 100;\n                    totalAmount += lineAmount;\n                }\n            }\n            var totalAmountText = "" + (totalAmount / 100).toFixed(2);\n            if( self.options.currency_unit === "usd"\n                || self.options.currency_unit === "cad" ) {\n                totalAmountText = "$" + totalAmountText;\n            } else if( self.options.currency_unit === "eur" ) {\n                totalAmountText = "\\u20ac" + totalAmountText;\n            }\n            var grouped = "";\n            var sep = "";\n            for( var idx = totalAmountText.length - 3 ; idx > 3; idx -= 3 ) {\n                grouped += totalAmountText.substring(idx - 3, idx) + sep;\n                sep = ",";\n            }\n            grouped = (totalAmountText.substring(0, idx) + grouped\n                       + totalAmountText.substring(totalAmountText.length - 3));\n            if( self.options.currency_unit === "cad" ) {\n                grouped = grouped + " CAD";\n            }\n            totalAmountNode.text(grouped);\n            var cardUse = self.element.parents("form").find("#card-use");\n            if( totalAmount > 0 ) {\n                if( !cardUse.is(":visible") ) { cardUse.slideDown(); }\n            } else {\n                if( cardUse.is(":visible") ) { cardUse.slideUp(); }\n            }\n        },\n\n        updateUploadButtonVisibility: function(fileInput) {\n            var button = fileInput.parents("td").find(".seat-upload-file");\n            if (fileInput.get(0).files.length === 0) {\n                button.hide();\n            } else {\n                button.show();\n            }\n        },\n\n        createLineMessage: function(data) {\n            return data.full_name + " (" + data.sync_on + ")";\n        },\n\n        insertLine: function(data) {\n            var msg = this.createLineMessage(data);\n            var prevLine = this.element.find("tbody[data-plan=\'" +\n                data.plan + "\'] .invoice-item").last();\n            var newLine = prevLine.clone();\n            var clonedNode = newLine.children("td.line-descr");\n\n            prevLine.removeClass("alert alert-info");\n            var txt = clonedNode.text().split(\', for\');\n            clonedNode.text(txt[0] + ", for " + msg);\n            newLine.insertAfter(prevLine);\n            newLine.addClass("alert alert-info");\n\n            this.updateTotalAmount();\n        },\n\n        updateLine: function(data) {\n            var msg = this.createLineMessage(data);\n            var prevLine = this.element.find("tbody[data-plan=\'" +\n                data.plan + "\'] .invoice-item")\n            var dup = null;\n            prevLine.each(function(i){\n                var $t = $(this);\n                if($t.find(\'td:last-child\').text().indexOf(data.sync_on) !== -1){\n                    dup = $t;\n                }\n            });\n            if(dup){\n                prevLine = dup;\n            } else {\n                prevLine = prevLine.first();\n            }\n            var newLine = prevLine;\n            var descrNode = newLine.children("td.line-descr");\n\n            var txt = descrNode.text().split(\', for\');\n            descrNode.text(txt[0] + ", for " + msg);\n            newLine.addClass("alert alert-info");\n\n            this.updateTotalAmount();\n        }\n    };\n\n    $.fn.invoice = function(options) {\n        var opts = $.extend( {}, $.fn.invoice.defaults, options );\n        return new Invoice($(this), opts);\n    };\n\n    $.fn.invoice.defaults = {\n        currency_unit: "usd",\n        saas_api_cart: "/api/cart/"\n    };\n\n   /** redeem a ``Coupon``.\n\n        HTML requirements:\n\n        <form>\n            <input name="code">\n            <input type="hidden" name="csrfmiddlewaretoken" value="...">\n        </form>\n    */\n   function Redeem(el, options){\n      this.element = $(el);\n      this.options = options;\n      this.init();\n   }\n\n   Redeem.prototype = {\n      init: function () {\n          var self = this;\n          self.element.find(".submit-code").click(function() {\n              var code = self.element.find("[name=\'code\']").val();\n              self.redeemCode(code);\n              // prevent the form from submitting with the default action\n              return false;\n          });\n      },\n\n      _getCSRFToken: function() {\n          var self = this;\n          var crsfNode = self.element.find("[name=\'csrfmiddlewaretoken\']");\n          if( crsfNode.length > 0 ) {\n              return crsfNode.val();\n          }\n          return getMetaCSRFToken();\n      },\n\n      redeemCode: function(code) {\n          var self = this;\n          $.ajax({ type: "POST",\n                   url: self.options.saas_api_redeem_coupon,\n                   beforeSend: function(xhr) {\n                      xhr.setRequestHeader("X-CSRFToken", self._getCSRFToken());\n                   },\n                   data: JSON.stringify({"code": code}),\n                   dataType: "json",\n                   contentType: "application/json; charset=utf-8",\n                   success: function(data) {\n                     // XXX does not show messages since we reload...\n                     showMessages([data.detail], "success");\n                     location.reload();\n                   },\n                   error: function(resp) {\n                       showErrorMessages(resp);\n                   }});\n          return false;\n      }\n   };\n\n   $.fn.redeem = function(options) {\n      var opts = $.extend( {}, $.fn.redeem.defaults, options );\n      return new Redeem($(this), opts);\n   };\n\n   $.fn.redeem.defaults = {\n       saas_api_redeem_coupon: "/api/cart/redeem/"\n   };\n\n\n   /** Decorate an HTML controller to trigger AJAX requests to create,\n       activate and delete ``Plan``s.\n\n       HTML requirements:\n\n       <div data-plan="_plan-slug_">\n         <button class="activate"></button>\n         <button class="delete"></button>\n       </div>\n    */\n   function Plan(el, options){\n      this.element = $(el);\n      this.options = options;\n      this.init();\n   }\n\n   Plan.prototype = {\n      init: function () {\n          var self = this;\n          self.id = self.element.attr("data-plan");\n          self.element.find(".activate").click(function() {\n              self.toggleActivatePlan();\n              // prevent the form from submitting with the default action\n              return false;\n          });\n          var deleteBtn = self.element.find(".delete");\n          if( deleteBtn ) {\n              var target = deleteBtn.data("target");\n              if( target !== undefined ) {\n                  deleteBtn = $(target).find(".delete");\n              }\n          }\n          deleteBtn.click(function() {\n              self.destroy();\n          });\n      },\n\n      _getCSRFToken: function() {\n          var self = this;\n          var crsfNode = self.element.find("[name=\'csrfmiddlewaretoken\']");\n          if( crsfNode.length > 0 ) {\n              return crsfNode.val();\n          }\n          return getMetaCSRFToken();\n      },\n\n      create: function(reload) {\n        "use strict";\n        var self = this;\n        $.ajax({ type: "POST",\n                 url: self.options.saas_api_plan + "/",\n                 beforeSend: function(xhr) {\n                     xhr.setRequestHeader("X-CSRFToken", self._getCSRFToken());\n                 },\n                 data: JSON.stringify(self.options.template_new),\n                 datatype: "json",\n                 contentType: "application/json; charset=utf-8",\n                 success: function(data) {\n                     showMessages([self.options.message_created], "success");\n                     if( reload ) { location.reload(true); }\n                 },\n                 error: function(resp) {\n                     showErrorMessages(resp);\n                 }\n               });\n      },\n\n      /** Update fields in a ``Plan`` by executing an AJAX request\n          to the service. */\n      update: function(data, successFunction) {\n        "use strict";\n        var self = this;\n        $.ajax({ type: "PUT",\n                 url: self.options.saas_api_plan + "/" + self.id + "/",\n                 beforeSend: function(xhr) {\n                     xhr.setRequestHeader("X-CSRFToken", self._getCSRFToken());\n                 },\n                 async: false,\n                 data: JSON.stringify(data),\n                 datatype: "json",\n                 contentType: "application/json; charset=utf-8",\n                 success: successFunction\n               });\n      },\n\n      destroy: function() {\n        "use strict";\n        var self = this;\n        $.ajax({ type: "DELETE",\n                 url: self.options.saas_api_plan + "/" + self.id + "/",\n                 beforeSend: function(xhr) {\n                     xhr.setRequestHeader("X-CSRFToken", self._getCSRFToken());\n                 },\n                 async: false,\n                 success: function(data) {\n                     window.location.href = self.options.saas_metrics_plans;\n                     showMessages([self.options.message_deleted], "success");\n                 },\n                 error: function(resp) {\n                     showErrorMessages(resp);\n                 }\n               });\n      },\n\n      get: function(successFunction) {\n        "use strict";\n        var self = this;\n        $.ajax({ type: "GET",\n                 url: self.options.saas_api_plan + "/" + self.id + "/",\n                 success: successFunction\n               });\n      },\n\n      /** Toggle a ``Plan`` from active to inactive and vise-versa\n          by executing an AJAX request to the service. */\n      toggleActivatePlan: function() {\n          "use strict";\n          var self = this;\n          var button = self.element.find(".activate");\n          $.ajax({type: "PUT",\n                 url: self.options.saas_api_plan + "/" + self.id + "/",\n                 beforeSend: function(xhr) {\n                     xhr.setRequestHeader("X-CSRFToken", self._getCSRFToken());\n                 },\n                 data: JSON.stringify({\n                     "is_active": !button.hasClass("activated")}),\n                 datatype: "json",\n                 contentType: "application/json; charset=utf-8",\n                 success: function(data) {\n                     if( data.is_active ) {\n                         button.addClass("activated");\n                         button.text("Deactivate");\n                     } else {\n                         button.removeClass("activated");\n                         button.text("Activate");\n                     }\n                 },\n                 error: function(resp) {\n                     showErrorMessages(resp);\n                 },\n          });\n      }\n   };\n\n   $.fn.plan = function(options) {\n      var opts = $.extend( {}, $.fn.plan.defaults, options );\n      return new Plan($(this), opts);\n   };\n\n   $.fn.plan.defaults = {\n       saas_api_plan: "/api/plan",\n       saas_metrics_plans: "/plan",\n       message_created: "Plan was created successfully.",\n       message_deleted: "Plan was successfully deleted.",\n       template_new: {\n           title: "New Plan",\n           description: "Write the description of the plan here.",\n           period_type: "monthly",\n           is_active: 1\n       }\n   };\n\n})(jQuery);\n'},162:function(n,e,t){t(1)(t(163))},163:function(n,e){n.exports='/* Functionality to interact with the Stripe payment processor.\n */\n(function ($) {\n    "use strict";\n\n        /** Augment a <form> to request a token from a bank account, then submit\n        the form with that token.\n\n        usage:\n            $("#payment-form").bank({stripePubKey: *YourStripePublicKey*});\n\n        HTML requirements:\n            <form>\n              \x3c!-- BE CAREFULL: Do not add name="" to the #account-number\n                   and #routing-number input nodes, else values will hit\n                   the server and break PCI compliance. --\x3e\n              <div class="form-group">\n                <input id="account-number" type="text" autocomplete="off" />\n              </div>\n              <div class="form-group">\n                <input id="routing-number" type="text" autocomplete="off" />\n              </div>\n              <div class="form-group">\n                <input name="country" type="text" />\n              </div>\n            </form>\n     */\n    function Bank(el, options){\n        this.element = $(el);\n        this.options = options;\n        this.init();\n    }\n\n    Bank.prototype = {\n        init: function () {\n            var self = this;\n            var accountNumberElement = self.element.find("#account-number");\n            if( accountNumberElement.length > 0 ) {\n                self.element.submit(\n                    function (event) { return self.stripeCreateToken(event); });\n            }\n        },\n\n        stripeResponseHandler: function(status, response) {\n            var self = this;\n            var submitButton = self.element.find("[type=\'submit\']");\n            if (response.error) {\n                // show the errors on the form\n                showMessages([response.error.message], "error");\n                submitButton.removeAttr("disabled");\n            } else {\n                // token contains id, etc.\n                var token = response.id;\n                // insert the token into the form so it gets submitted\n                // to the server.\n                self.element.append(\n                    "<input type=\'hidden\' name=\'stripeToken\' value=\'" + token + "\'/>");\n                // and submit\n                self.element.get(0).submit();\n            }\n        },\n\n        stripeCreateToken: function(event) {\n            event.preventDefault();\n            var self = this;\n            var submitButton = self.element.find("[type=\'submit\']");\n            // disable the submit button to prevent repeated clicks\n            submitButton.attr("disabled", "disabled");\n            var valid = true;\n            var errorMessages = "";\n\n            var countryElement = self.element.find("[name=\'country\']");\n            var country = countryElement.val();\n            if( country === "" ) {\n                if( errorMessages ) { errorMessages += ", "; }\n                errorMessages += self.options.countryLabel;\n                countryElement.parents(".form-group").addClass("has-error");\n                valid = false;\n            }\n            /* BE CAREFULL: Do not add name="" to these <input> nodes,\n               else they will hit our server and break PCI compliance. */\n            var accountNumberElement = self.element.find("#account-number");\n            var accountNumber = accountNumberElement.val();\n            if(!Stripe.bankAccount.validateAccountNumber(accountNumber, country)) {\n                if( errorMessages ) { errorMessages += ", "; }\n                errorMessages += self.options.accountNumberLabel;\n                accountNumberElement.parents(".form-group").addClass("has-error");\n                valid = false;\n            }\n            var routingNumberElement = self.element.find("#routing-number");\n            var routingNumber = routingNumberElement.val();\n            if(!Stripe.bankAccount.validateRoutingNumber(routingNumber, country)) {\n                if( errorMessages ) { errorMessages += ", "; }\n                errorMessages += self.options.routingNumberLabel;\n                routingNumberElement.parents(\n                    ".form-group").addClass("has-error");\n                valid = false;\n            }\n            if( errorMessages ) {\n                errorMessages = errorMessages + self.options.fieldsCannotBeEmptyError;\n            }\n            if( valid ) {\n                // this identifies your website in the createToken call below\n                Stripe.setPublishableKey(self.options.stripePubKey);\n                Stripe.bankAccount.createToken({\n                    country: country,\n                    routingNumber: routingNumber,\n                    accountNumber: accountNumber\n                }, function(status, response) {\n                    self.stripeResponseHandler(status, response);\n                });\n            } else {\n                showMessages([errorMessages], "error");\n                submitButton.removeAttr("disabled");\n            }\n            // prevent the form from submitting with the default action\n            return false;\n        }\n    };\n\n    $.fn.bank = function(options) {\n        var opts = $.extend( {}, $.fn.bank.defaults, options );\n        return new Bank($(this), opts);\n    };\n\n    $.fn.bank.defaults = {\n        stripePubKey: null,\n        countryLabel: "Country",\n        accountNumberLabel: "Account Number",\n        routingNumberLabel: "Routing Number",\n        fieldsCannotBeEmptyError: " field(s) cannot be empty."\n    };\n\n    /** Augment a <form> to request a token from a credit card, then submit\n        the form with that token.\n\n        usage:\n            $("#payment-form").card({stripePubKey: *YourStripePublicKey*});\n\n        HTML requirements:\n            <form>\n              <div class="last4"></div>\n              <div class="exp_date"></div>\n              <div id="card-use">\n              \x3c!-- BE CAREFULL: Do not add name="" to the #card-number,\n                   #card-cvc, #card-exp-month, #card-exp-year input nodes,\n                   else values will hit the server and break PCI compliance. --\x3e\n                <div class="form-group">\n                  <input id="card-number" type="text" autocomplete="off" />\n                </div>\n                <div class="form-group">\n                  <input id="card-cvc" type="text" autocomplete="off" />\n                </div>\n                <div class="form-group">\n                  <input id="card-exp-month" type="text" autocomplete="off" />\n                </div>\n                <div class="form-group">\n                  <input id="card-exp-year" type="text" autocomplete="off" />\n                </div>\n                <div class="form-group">\n                  <input name="card_name" type="text" />\n                </div>\n                <div class="form-group">\n                  <input name="card_address_line1" type="text" />\n                </div>\n                <div class="form-group">\n                  <input name="card_city" type="text" />\n                </div>\n                <div class="form-group">\n                  <input name="region" type="text" />\n                </div>\n                <div class="form-group">\n                  <input name="card_address_zip" type="text" />\n                </div>\n                <div class="form-group">\n                  <input name="country" type="text" />\n                </div>\n              </div>\n            </form>\n     */\n    function Card(el, options){\n        this.element = $(el);\n        this.options = options;\n        this.init();\n    }\n\n    Card.prototype = {\n        init: function () {\n            var self = this;\n        },\n    };\n\n    Card.prototype = {\n        init: function () {\n            var self = this;\n            if( self.options.stripeAccount ) {\n                self.stripe = Stripe(self.options.stripePubKey, {\n                    stripeAccount: self.options.stripeAccount\n                });\n            } else {\n                self.stripe = Stripe(self.options.stripePubKey);\n            }\n            if( self.options.stripeIntentSecret ) {\n                var elements = self.stripe.elements();\n                self.cardElement = elements.create("card", {\n                    hidePostalCode: true\n                });\n                self.cardElement.mount("#card-element");\n            }\n\n            self.element.find("#card-update").click(function(event) {\n                event.preventDefault();\n                self.showCardInputFields();\n            });\n            var cardNumber = self.element.find("#card-number");\n            if( cardNumber.length > 0 ) {\n                if( typeof $.payment !== \'undefined\' ) {\n                    /* Optional use of jquery.payment */\n                    cardNumber.find("#card-number").payment(\'formatCardNumber\');\n                    cardNumber.keyup(function(){\n                        var ccType = $.payment.cardType(\n                            self.element.find("#card-number").val());\n                        if( ccType === "visa" ) {\n                            self.element.find("#visa").css("opacity", "1");\n                        } else if( ccType === "mastercard" ){\n                            self.element.find("#mastercard").css("opacity", "1");\n                        } else if( ccType === "amex"){\n                            self.element.find("#amex").css("opacity", "1");\n                        } else if( ccType === "discover" ){\n                            self.element.find("#discover").css("opacity", "1");\n                        } else {\n                            self.element.find("#visa").removeAttr("style");\n                            self.element.find("#mastercard").removeAttr("style");\n                            self.element.find("#amex").removeAttr("style");\n                            self.element.find("#discover").removeAttr("style");\n                        }\n                    });\n                }\n            }\n            // XXX As long as we are looking up the card data in `CartView`,\n            // we use the following code instead of:\n            //\n            // `self.query();`\n            //\n            if( self.element.find("#card-data:hidden").length > 0 ) {\n                /* Only attach ``stripeCreateToken`` if we don\'t have\n                   a card on file already. */\n                self.element.submit(function (event) {\n                    return self.stripeCreateToken(event);\n                });\n            }\n        },\n\n        query: function() {\n            "use strict";\n            var self = this;\n            $.get(self.options.saas_api_card, function(data) {\n                if( data.exp_date && data.exp_date.match(\n                    "[0-9][0-9]/[0-9][0-9][0-9][0-9]") ) {\n                    self.element.find("[data-last4]").text(data.last4);\n                    self.element.find("[data-exp-date]").text(data.exp_date);\n                    self.element.find("#card-update").show();\n                    self.element.find("#card-data").show();\n                    self.element.find("#card-no-data").hide();\n                    self.element.find("#card-billing-address").hide();\n                } else {\n                    self.showCardInputFields();\n                }\n            }).fail(function() {\n                self.element.find("[data-last4]").text("Err");\n                self.element.find("[data-exp-date]").text("Err");\n            });\n        },\n\n        showCardInputFields: function() {\n            var self = this;\n            self.element.find("#card-update").hide();\n            self.element.find("#card-data").hide();\n            self.element.find("#card-no-data").show();\n            self.element.find("#card-billing-address").show();\n            // Only attach ``stripeCreateToken`` if we don\'t have\n            // a card on file already.\n            self.element.submit(function (event) {\n                return self.stripeCreateToken(event);\n            });\n        },\n\n        stripeResponseHandler: function(resp) {\n            var self = this;\n            var submitButton = self.element.find("[type=\'submit\']");\n            if (resp.error) {\n                // show the errors on the form\n                showMessages([resp.error.message], "error");\n                submitButton.removeAttr("disabled");\n            } else {\n                var token = resp.id;\n                if( !token && resp.paymentIntent ) {\n                    token = resp.paymentIntent.id;\n                }\n                if( !token && resp.setupIntent ) {\n                    token = resp.setupIntent.id;\n                }\n                // insert the token into the form so it gets submitted\n                // to the server.\n                self.element.append("<input type=\'hidden\' name=\'stripeToken\' value=\'" + token + "\'/>");\n                // and submit\n                self.element.get(0).submit();\n            }\n        },\n\n        stripeCreateToken: function(event) {\n            // disable the submit button to prevent repeated clicks\n            event.preventDefault();\n            var self = this;\n            var submitButton = self.element.find("[type=\'submit\']");\n            submitButton.attr("disabled", "disabled");\n            var valid = true;\n            var errorMessages = "";\n\n            var cardUse = self.element.find("#card-use");\n            if( !cardUse.is(":visible") ) {\n                return self.element.get(0).submit(event);\n            }\n\n            /* BE CAREFULL: Do not add name="" to these <input> nodes,\n               else they will hit our server and break PCI compliance. */\n            var numberElement = cardUse.find("#card-number");\n            var number = numberElement.val();\n            if( number === "" ) {\n                if( errorMessages ) { errorMessages += ", "; }\n                errorMessages += self.options.cardNumberLabel;\n                numberElement.parents(".form-group").addClass("has-error");\n                valid = false;\n            }\n            var cvcElement = cardUse.find("#card-cvc");\n            var cvc = cvcElement.val();\n            if( cvc === "" ) {\n                if( errorMessages ) { errorMessages += ", "; }\n                errorMessages += self.options.securityCodeLabel;\n                cvcElement.parents(".form-group").addClass("has-error");\n                valid = false;\n            }\n            var expMonthElement = cardUse.find("#card-exp-month");\n            var expYearElement = cardUse.find("#card-exp-year");\n            var expMonth = expMonthElement.val();\n            var expYear = expYearElement.val();\n            if( expMonth === "" || expYear === "" ) {\n                if( errorMessages ) { errorMessages += ", "; }\n                errorMessages += self.options.expirationLabel;\n                expMonthElement.parents(".form-group").addClass("has-error");\n                expYearElement.parents(".form-group").addClass("has-error");\n                valid = false;\n            }\n\n            /* These are OK to forward to our server. */\n            var nameElement = cardUse.find("[name=\'card_name\']");\n            var name = nameElement.val();\n            if( name === "" ) {\n                if( errorMessages ) { errorMessages += ", "; }\n                errorMessages += self.options.cardHolderLabel;\n                nameElement.parents(".form-group").addClass("has-error");\n                valid = false;\n            }\n            var addressLine1Element = cardUse.find("[name=\'card_address_line1\']");\n            var addressLine1 = addressLine1Element.val();\n            if( addressLine1 === "" ) {\n                if( errorMessages ) { errorMessages += ", "; }\n                errorMessages += self.options.streetAddressLabel;\n                addressLine1Element.parents(\n                    ".form-group").addClass("has-error");\n                valid = false;\n            }\n            var addressCityElement = cardUse.find("[name=\'card_city\']");\n            var addressCity = addressCityElement.val();\n            if( addressCity === "" ) {\n                if( errorMessages ) { errorMessages += ", "; }\n                errorMessages += self.options.localityLabel;\n                addressCityElement.parents(".form-group").addClass("has-error");\n                valid = false;\n            }\n            var addressStateElement = cardUse.find("[name=\'region\']");\n            var addressState = addressStateElement.val();\n            if( addressState === "" ) {\n                if( errorMessages ) { errorMessages += ", "; }\n                errorMessages += self.options.regionLabel;\n                addressStateElement.parents(\n                    ".form-group").addClass("has-error");\n                valid = false;\n            }\n            var addressZipElement = cardUse.find("[name=\'card_address_zip\']");\n            var addressZip = addressZipElement.val();\n            if( addressZip === "" ) {\n                if( errorMessages ) { errorMessages += ", "; }\n                errorMessages += self.options.postalCodeLabel;\n                addressZipElement.parents(".form-group").addClass("has-error");\n                valid = false;\n            }\n            var addressCountryElement = cardUse.find("[name=\'country\']");\n            var addressCountry = addressCountryElement.val();\n            if( addressCountry === "" ) {\n                if( errorMessages ) { errorMessages += ", "; }\n                errorMessages += self.options.countryLabel;\n                addressCountryElement.parents(\n                    ".form-group").addClass("has-error");\n                valid = false;\n            }\n            if( errorMessages ) {\n                errorMessages = errorMessages + self.options.fieldsCannotBeEmptyError;\n            }\n            if( valid ) {\n                // this identifies your website in the createToken call below\n                if( self.options.stripeIntentSecret ) {\n                    if( self.options.stripeIntentSecret.substring(0, 3) === \'pi_\' ) {\n                        self.stripe.confirmCardPayment(\n                            self.options.stripeIntentSecret, {\n                                payment_method: {\n                                    type: "card",\n                                    card: self.cardElement,\n                                    billing_details: {\n                                        address: {\n                                            city: addressCity,\n                                            country: addressCountry,\n                                            line1: addressLine1,\n                                            // line2: null,\n                                            postal_code: addressZip,\n                                            state: addressState,\n                                        },\n                                        name: name,\n                                    }\n                                }\n                            }\n                        ).then(function(resp) {\n                            self.stripeResponseHandler(resp);\n                        });\n                    } else {\n                        self.stripe.confirmCardSetup(\n                            self.options.stripeIntentSecret, {\n                                payment_method: {\n                                    type: "card",\n                                    card: self.cardElement,\n                                    billing_details: {\n                                        address: {\n                                            city: addressCity,\n                                            country: addressCountry,\n                                            line1: addressLine1,\n                                            // line2: null,\n                                            postal_code: addressZip,\n                                            state: addressState,\n                                        },\n                                        name: name,\n                                    }\n                                }\n                            }\n                        ).then(function(resp) {\n                            self.stripeResponseHandler(resp);\n                        });\n                    }\n                } else {\n                    // use https://js.stripe.com/v2/\n                    Stripe.setPublishableKey(self.options.stripePubKey);\n                    Stripe.createToken({\n                        number: number,\n                        cvc: cvc,\n                        exp_month: expMonth,\n                        exp_year: expYear,\n                        name: name,\n                        address_line1: addressLine1,\n                        address_city: addressCity,\n                        address_state: addressState,\n                        address_zip: addressZip,\n                        address_country: addressCountry\n                    }, function(status, resp) {\n                        self.stripeResponseHandler(resp);\n                    });\n                }\n            } else {\n                showMessages([errorMessages], "error");\n                submitButton.removeAttr("disabled");\n            }\n            // prevent the form from submitting with the default action\n            return false;\n        }\n    };\n\n    $.fn.card = function(options) {\n        var opts = $.extend( {}, $.fn.card.defaults, options );\n        return new Card($(this), opts);\n    };\n\n    $.fn.card.defaults = {\n        stripePubKey: null,\n        stripeIntentSecret: null,\n        stripeAccount: null,\n        saas_api_card: null,\n        cardNumberLabel: "Card Number",\n        securityCodeLabel: "Security Code",\n        expirationLabel: "Expiration",\n        cardHolderLabel: "Card Holder",\n        streetAddressLabel: "Street address",\n        localityLabel: "City/Town",\n        regionLabel: "State/Province/County",\n        postalCodeLabel: "Zip/Postal code",\n        countryLabel: "Country",\n        fieldsCannotBeEmptyError: " field(s) cannot be empty."\n    };\n\n\n})(jQuery);\n'},5:function(n,e,t){t(1)(t(6))},6:function(n,e){n.exports="/** Functions used for display of localized dates and numbers.\n */\n\nfunction humanizeDate(at_time) {\n    return moment(at_time).format(DATE_FORMAT);\n}\n\n\nfunction humanizeNumber(cell, unit, scale) {\n    scale = scale || 1;\n    var value = cell * scale;\n\n    if( typeof Intl !== 'undefined' &&\n        typeof Intl.NumberFormat !== 'undefined') {\n        var locale = 'en-US';\n        if( navigator.languages && navigator.languages.length > 0 ) {\n            locale = navigator.languages[0];\n        } else if( navigator.language ) {\n            locale = navigator.language;\n        } else if( navigator.browserLanguage ) {\n            locale = navigator.browserLanguage;\n        }\n        if( unit ) {\n            return (new Intl.NumberFormat(locale, {\n                style: 'currency', currency: unit})).format(value);\n        }\n        return (new Intl.NumberFormat(locale)).format(value);\n    }\n\n    // `Intl` is not present. Let's do what we can.\n    var precision = 0;\n    var thousandsSeparator = ',';\n    var decimalSeparator = '.';\n    var symbol = '';\n    var symbolOnLeft = true;\n\n    if( unit ) {\n        // We have a currency unit\n        if( unit === \"usd\" || unit === \"cad\" ) {\n            symbol = \"$\";\n        } else if( unit === \"eur\" ) {\n            symbol = \"\\u20ac\";\n        }\n        precision = 2;\n    }\n\n    var stringified = Math.abs(value).toFixed(precision);\n    var decimalPart = precision ? stringified.slice(-1 - precision) : '';\n    var integralPart = precision ? stringified.slice(0, -1 - precision)\n        : stringified;\n\n    var rem = integralPart.length % 3;\n    var head = rem > 0 ? (integralPart.slice(0, rem) + (\n        integralPart.length > 3 ? thousandsSeparator : ''))\n        : '';\n    var sign = value < 0 ? '-' : '';\n    var valueFormatted = sign + head + integralPart.slice(rem).replace(\n        /(\\d{3})(?=\\d)/g, '$1' + thousandsSeparator) + decimalPart;\n\n    return symbolOnLeft ?\n        symbol + valueFormatted : valueFormatted + symbol;\n};\n\n\nfunction humanizeTimeDelta(at_time, ends_at) {\n    var self = this;\n    var cutOff = ends_at ? moment(ends_at, DATE_FORMAT) : moment();\n    var dateTime = moment(at_time);\n    if( dateTime <= cutOff ) {\n        var timeAgoTemplate = (self.$labels && self.$labels.timeAgoTemplate) ?\n            self.$labels.timeAgoTemplate : \"%(timedelta)s ago\";\n        return timeAgoTemplate.replace(\"%(timedelta)s\",\n            moment.duration(cutOff.diff(dateTime)).humanize());\n    }\n    var timeLeftTemplate = (self.$labels && self.$labels.timeLeftTemplate) ?\n        self.$labels.timeLeftTemplate : \"%(timedelta)s ago\";\n    return timeLeftTemplate.replace(\"%(timedelta)s\",\n        moment.duration(dateTime.diff(cutOff)).humanize());\n};\n"}});